// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FestivalProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Festival.Protocol {

  /// <summary>Holder for reflection information generated from FestivalProtocol.proto</summary>
  public static partial class FestivalProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for FestivalProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FestivalProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZGZXN0aXZhbFByb3RvY29sLnByb3RvEhFmZXN0aXZhbC5wcm90b2NvbCIi",
            "CgRVc2VyEgoKAmlkGAEgASgJEg4KBnBhc3N3ZBgCIAEoCSJKCgZUaWNrZXQS",
            "CgoCSUQYASABKAUSEgoKZmVzdGl2YWxJRBgCIAEoBRIRCglidXllck5hbWUY",
            "AyABKAkSDQoFc2VhdHMYBCABKAUiIgoGQXJ0aXN0EgoKAklEGAEgASgFEgwK",
            "BG5hbWUYAiABKAkiqwEKBFNob3cSCgoCSUQYASABKAUSDAoEbmFtZRgCIAEo",
            "CRIQCghsb2NhdGlvbhgDIAEoCRIlCgRkYXRlGAQgASgLMhcuZmVzdGl2YWwu",
            "cHJvdG9jb2wuRGF0ZRIpCgZhcnRpc3QYBSABKAsyGS5mZXN0aXZhbC5wcm90",
            "b2NvbC5BcnRpc3QSEgoKdG90YWxTZWF0cxgGIAEoBRIRCglzb2xkU2VhdHMY",
            "ByABKAUiXgoERGF0ZRILCgNkYXkYASABKAUSDQoFbW9udGgYAiABKAUSDAoE",
            "eWVhchgDIAEoBRIMCgRob3VyGAQgASgFEg4KBm1pbnV0ZRgFIAEoBRIOCgZz",
            "ZWNvbmQYBiABKAUijwMKD0Zlc3RpdmFsUmVxdWVzdBI1CgR0eXBlGAEgASgO",
            "MicuZmVzdGl2YWwucHJvdG9jb2wuRmVzdGl2YWxSZXF1ZXN0LlR5cGUSJwoE",
            "dXNlchgCIAEoCzIXLmZlc3RpdmFsLnByb3RvY29sLlVzZXJIABInCgRzaG93",
            "GAMgASgLMhcuZmVzdGl2YWwucHJvdG9jb2wuU2hvd0gAEicKBGRhdGUYBCAB",
            "KAsyFy5mZXN0aXZhbC5wcm90b2NvbC5EYXRlSAASKwoGYXJ0aXN0GAUgASgL",
            "MhkuZmVzdGl2YWwucHJvdG9jb2wuQXJ0aXN0SAASKwoGdGlja2V0GAYgASgL",
            "MhkuZmVzdGl2YWwucHJvdG9jb2wuVGlja2V0SAAiZQoEVHlwZRILCgdVTktO",
            "T1dOEAASCQoFTE9HSU4QARIKCgZMT0dPVVQQAhIRCg1HRVRfQUxMX1NIT1dT",
            "EAMSFQoRR0VUX1NIT1dTX0JZX0RBVEUQBBIPCgtCVVlfVElDS0VUUxAFQgkK",
            "B3BheWxvYWQiiAIKEEZlc3RpdmFsUmVzcG9uc2USNgoEdHlwZRgBIAEoDjIo",
            "LmZlc3RpdmFsLnByb3RvY29sLkZlc3RpdmFsUmVzcG9uc2UuVHlwZRINCgVl",
            "cnJvchgCIAEoCRImCgVzaG93cxgDIAMoCzIXLmZlc3RpdmFsLnByb3RvY29s",
            "LlNob3cSKQoGdGlja2V0GAQgASgLMhkuZmVzdGl2YWwucHJvdG9jb2wuVGlj",
            "a2V0IloKBFR5cGUSCwoHVU5LTk9XThAAEgYKAk9LEAESCQoFRVJST1IQAhIN",
            "CglHRVRfU0hPV1MQAxIRCg1USUNLRVRfQk9VR0hUEAQSEAoMUkVGUkVTSF9E",
            "QVRBEAVCLgoZbmV0d29yay5wcm90b2J1ZmZwcm90b2NvbEIRRmVzdGl2YWxQ",
            "cm90b2J1ZnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.User), global::Festival.Protocol.User.Parser, new[]{ "Id", "Passwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.Ticket), global::Festival.Protocol.Ticket.Parser, new[]{ "ID", "FestivalID", "BuyerName", "Seats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.Artist), global::Festival.Protocol.Artist.Parser, new[]{ "ID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.Show), global::Festival.Protocol.Show.Parser, new[]{ "ID", "Name", "Location", "Date", "Artist", "TotalSeats", "SoldSeats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.Date), global::Festival.Protocol.Date.Parser, new[]{ "Day", "Month", "Year", "Hour", "Minute", "Second" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.FestivalRequest), global::Festival.Protocol.FestivalRequest.Parser, new[]{ "Type", "User", "Show", "Date", "Artist", "Ticket" }, new[]{ "Payload" }, new[]{ typeof(global::Festival.Protocol.FestivalRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Festival.Protocol.FestivalResponse), global::Festival.Protocol.FestivalResponse.Parser, new[]{ "Type", "Error", "Shows", "Ticket" }, null, new[]{ typeof(global::Festival.Protocol.FestivalResponse.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      passwd_ = other.passwd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Passwd != other.Passwd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      iD_ = other.iD_;
      festivalID_ = other.festivalID_;
      buyerName_ = other.buyerName_;
      seats_ = other.seats_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "festivalID" field.</summary>
    public const int FestivalIDFieldNumber = 2;
    private int festivalID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FestivalID {
      get { return festivalID_; }
      set {
        festivalID_ = value;
      }
    }

    /// <summary>Field number for the "buyerName" field.</summary>
    public const int BuyerNameFieldNumber = 3;
    private string buyerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyerName {
      get { return buyerName_; }
      set {
        buyerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 4;
    private int seats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (FestivalID != other.FestivalID) return false;
      if (BuyerName != other.BuyerName) return false;
      if (Seats != other.Seats) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (FestivalID != 0) hash ^= FestivalID.GetHashCode();
      if (BuyerName.Length != 0) hash ^= BuyerName.GetHashCode();
      if (Seats != 0) hash ^= Seats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (FestivalID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FestivalID);
      }
      if (BuyerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BuyerName);
      }
      if (Seats != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (FestivalID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FestivalID);
      }
      if (BuyerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyerName);
      }
      if (Seats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.FestivalID != 0) {
        FestivalID = other.FestivalID;
      }
      if (other.BuyerName.Length != 0) {
        BuyerName = other.BuyerName;
      }
      if (other.Seats != 0) {
        Seats = other.Seats;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            FestivalID = input.ReadInt32();
            break;
          }
          case 26: {
            BuyerName = input.ReadString();
            break;
          }
          case 32: {
            Seats = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Artist : pb::IMessage<Artist> {
    private static readonly pb::MessageParser<Artist> _parser = new pb::MessageParser<Artist>(() => new Artist());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist(Artist other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artist Clone() {
      return new Artist(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artist other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Show : pb::IMessage<Show> {
    private static readonly pb::MessageParser<Show> _parser = new pb::MessageParser<Show>(() => new Show());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Show> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show(Show other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      location_ = other.location_;
      Date = other.date_ != null ? other.Date.Clone() : null;
      Artist = other.artist_ != null ? other.Artist.Clone() : null;
      totalSeats_ = other.totalSeats_;
      soldSeats_ = other.soldSeats_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Show Clone() {
      return new Show(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private global::Festival.Protocol.Date date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Date Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 5;
    private global::Festival.Protocol.Artist artist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Artist Artist {
      get { return artist_; }
      set {
        artist_ = value;
      }
    }

    /// <summary>Field number for the "totalSeats" field.</summary>
    public const int TotalSeatsFieldNumber = 6;
    private int totalSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSeats {
      get { return totalSeats_; }
      set {
        totalSeats_ = value;
      }
    }

    /// <summary>Field number for the "soldSeats" field.</summary>
    public const int SoldSeatsFieldNumber = 7;
    private int soldSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoldSeats {
      get { return soldSeats_; }
      set {
        soldSeats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Show);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Show other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Location != other.Location) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Artist, other.Artist)) return false;
      if (TotalSeats != other.TotalSeats) return false;
      if (SoldSeats != other.SoldSeats) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (artist_ != null) hash ^= Artist.GetHashCode();
      if (TotalSeats != 0) hash ^= TotalSeats.GetHashCode();
      if (SoldSeats != 0) hash ^= SoldSeats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (date_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Date);
      }
      if (artist_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Artist);
      }
      if (TotalSeats != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalSeats);
      }
      if (SoldSeats != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SoldSeats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (artist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artist);
      }
      if (TotalSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSeats);
      }
      if (SoldSeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoldSeats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Show other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          date_ = new global::Festival.Protocol.Date();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.artist_ != null) {
        if (artist_ == null) {
          artist_ = new global::Festival.Protocol.Artist();
        }
        Artist.MergeFrom(other.Artist);
      }
      if (other.TotalSeats != 0) {
        TotalSeats = other.TotalSeats;
      }
      if (other.SoldSeats != 0) {
        SoldSeats = other.SoldSeats;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            if (date_ == null) {
              date_ = new global::Festival.Protocol.Date();
            }
            input.ReadMessage(date_);
            break;
          }
          case 42: {
            if (artist_ == null) {
              artist_ = new global::Festival.Protocol.Artist();
            }
            input.ReadMessage(artist_);
            break;
          }
          case 48: {
            TotalSeats = input.ReadInt32();
            break;
          }
          case 56: {
            SoldSeats = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Date : pb::IMessage<Date> {
    private static readonly pb::MessageParser<Date> _parser = new pb::MessageParser<Date>(() => new Date());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Date> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date(Date other) : this() {
      day_ = other.day_;
      month_ = other.month_;
      year_ = other.year_;
      hour_ = other.hour_;
      minute_ = other.minute_;
      second_ = other.second_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Date Clone() {
      return new Date(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 3;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 4;
    private int hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 5;
    private int minute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 6;
    private int second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Date);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Date other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (Month != other.Month) return false;
      if (Year != other.Year) return false;
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (Second != other.Second) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Year != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Year);
      }
      if (Hour != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Minute);
      }
      if (Second != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Second);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minute);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Second);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Date other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Year = input.ReadInt32();
            break;
          }
          case 32: {
            Hour = input.ReadInt32();
            break;
          }
          case 40: {
            Minute = input.ReadInt32();
            break;
          }
          case 48: {
            Second = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FestivalRequest : pb::IMessage<FestivalRequest> {
    private static readonly pb::MessageParser<FestivalRequest> _parser = new pb::MessageParser<FestivalRequest>(() => new FestivalRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FestivalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest(FestivalRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Show:
          Show = other.Show.Clone();
          break;
        case PayloadOneofCase.Date:
          Date = other.Date.Clone();
          break;
        case PayloadOneofCase.Artist:
          Artist = other.Artist.Clone();
          break;
        case PayloadOneofCase.Ticket:
          Ticket = other.Ticket.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalRequest Clone() {
      return new FestivalRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Festival.Protocol.FestivalRequest.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.FestivalRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.User User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Festival.Protocol.User) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Show Show {
      get { return payloadCase_ == PayloadOneofCase.Show ? (global::Festival.Protocol.Show) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Show;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Date Date {
      get { return payloadCase_ == PayloadOneofCase.Date ? (global::Festival.Protocol.Date) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Date;
      }
    }

    /// <summary>Field number for the "artist" field.</summary>
    public const int ArtistFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Artist Artist {
      get { return payloadCase_ == PayloadOneofCase.Artist ? (global::Festival.Protocol.Artist) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Artist;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Ticket Ticket {
      get { return payloadCase_ == PayloadOneofCase.Ticket ? (global::Festival.Protocol.Ticket) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Ticket;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Show = 3,
      Date = 4,
      Artist = 5,
      Ticket = 6,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FestivalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FestivalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Show, other.Show)) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Artist, other.Artist)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Show) hash ^= Show.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Date) hash ^= Date.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Artist) hash ^= Artist.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Ticket) hash ^= Ticket.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Show) {
        output.WriteRawTag(26);
        output.WriteMessage(Show);
      }
      if (payloadCase_ == PayloadOneofCase.Date) {
        output.WriteRawTag(34);
        output.WriteMessage(Date);
      }
      if (payloadCase_ == PayloadOneofCase.Artist) {
        output.WriteRawTag(42);
        output.WriteMessage(Artist);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        output.WriteRawTag(50);
        output.WriteMessage(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Show) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Show);
      }
      if (payloadCase_ == PayloadOneofCase.Date) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (payloadCase_ == PayloadOneofCase.Artist) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artist);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FestivalRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User;
          break;
        case PayloadOneofCase.Show:
          Show = other.Show;
          break;
        case PayloadOneofCase.Date:
          Date = other.Date;
          break;
        case PayloadOneofCase.Artist:
          Artist = other.Artist;
          break;
        case PayloadOneofCase.Ticket:
          Ticket = other.Ticket;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Festival.Protocol.FestivalRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Festival.Protocol.User subBuilder = new global::Festival.Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Festival.Protocol.Show subBuilder = new global::Festival.Protocol.Show();
            if (payloadCase_ == PayloadOneofCase.Show) {
              subBuilder.MergeFrom(Show);
            }
            input.ReadMessage(subBuilder);
            Show = subBuilder;
            break;
          }
          case 34: {
            global::Festival.Protocol.Date subBuilder = new global::Festival.Protocol.Date();
            if (payloadCase_ == PayloadOneofCase.Date) {
              subBuilder.MergeFrom(Date);
            }
            input.ReadMessage(subBuilder);
            Date = subBuilder;
            break;
          }
          case 42: {
            global::Festival.Protocol.Artist subBuilder = new global::Festival.Protocol.Artist();
            if (payloadCase_ == PayloadOneofCase.Artist) {
              subBuilder.MergeFrom(Artist);
            }
            input.ReadMessage(subBuilder);
            Artist = subBuilder;
            break;
          }
          case 50: {
            global::Festival.Protocol.Ticket subBuilder = new global::Festival.Protocol.Ticket();
            if (payloadCase_ == PayloadOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FestivalRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("LOGIN")] Login = 1,
        [pbr::OriginalName("LOGOUT")] Logout = 2,
        [pbr::OriginalName("GET_ALL_SHOWS")] GetAllShows = 3,
        [pbr::OriginalName("GET_SHOWS_BY_DATE")] GetShowsByDate = 4,
        [pbr::OriginalName("BUY_TICKETS")] BuyTickets = 5,
      }

    }
    #endregion

  }

  public sealed partial class FestivalResponse : pb::IMessage<FestivalResponse> {
    private static readonly pb::MessageParser<FestivalResponse> _parser = new pb::MessageParser<FestivalResponse>(() => new FestivalResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FestivalResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Festival.Protocol.FestivalProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse(FestivalResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      shows_ = other.shows_.Clone();
      Ticket = other.ticket_ != null ? other.Ticket.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalResponse Clone() {
      return new FestivalResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Festival.Protocol.FestivalResponse.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.FestivalResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shows" field.</summary>
    public const int ShowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Festival.Protocol.Show> _repeated_shows_codec
        = pb::FieldCodec.ForMessage(26, global::Festival.Protocol.Show.Parser);
    private readonly pbc::RepeatedField<global::Festival.Protocol.Show> shows_ = new pbc::RepeatedField<global::Festival.Protocol.Show>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Festival.Protocol.Show> Shows {
      get { return shows_; }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 4;
    private global::Festival.Protocol.Ticket ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Festival.Protocol.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FestivalResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FestivalResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if(!shows_.Equals(other.shows_)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= shows_.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      shows_.WriteTo(output, _repeated_shows_codec);
      if (ticket_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += shows_.CalculateSize(_repeated_shows_codec);
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FestivalResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      shows_.Add(other.shows_);
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          ticket_ = new global::Festival.Protocol.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Festival.Protocol.FestivalResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            shows_.AddEntriesFrom(input, _repeated_shows_codec);
            break;
          }
          case 34: {
            if (ticket_ == null) {
              ticket_ = new global::Festival.Protocol.Ticket();
            }
            input.ReadMessage(ticket_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FestivalResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("OK")] Ok = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("GET_SHOWS")] GetShows = 3,
        [pbr::OriginalName("TICKET_BOUGHT")] TicketBought = 4,
        [pbr::OriginalName("REFRESH_DATA")] RefreshData = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
